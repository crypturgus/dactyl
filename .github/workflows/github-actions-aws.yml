name: Python CI

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**' # Ignore all paths to not trigger on push
  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11' # or the version you use

      - name: Install dependencies with Poetry
        run: |
          pip install poetry
          poetry install
        working-directory: ./api

      - name: Run isort
        run: poetry run isort --check-only .
        working-directory: ./api

      - name: Run flake8
        run: poetry run flake8 .
        working-directory: ./api

      - name: Run black
        run: poetry run black --check .
        working-directory: ./api

  test:
    runs-on: ubuntu-latest
    env:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_HOST: "localhost"
      POSTGRES_PORT: "5432"
      ALLOWED_HOSTS: "*"
      POSTGRES_HOST_AUTH_METHOD: "trust"
      SECRET_KEY: "ghaSecretKey"
      JWT_SECRET_KEY: "jwtSecretKey"
      USE_HTTPS: "False"
    services:
      postgres:
        image: postgres:16.0-alpine
        env:
          TEST_POSTGRES_DB: ${{ env.POSTGRES_DB }}
          TEST_POSTGRES_USER: ${{ env.POSTGRES_USER }}
          TEST_POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          TEST_POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          TEST_POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
          ALLOWED_HOSTS: ${{ env.ALLOWED_HOSTS }}
          POSTGRES_HOST_AUTH_METHOD: ${{ env.POSTGRES_HOST_AUTH_METHOD }}
          SECRET_KEY: ${{ env.SECRET_KEY }}
          JWT_SECRET_KEY: ${{ env.JWT_SECRET_KEY }}
          USE_HTTPS: ${{ env.USE_HTTPS }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies with Poetry
        run: |
          pip install poetry
          poetry install
        working-directory: ./api

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Django tests
        run: poetry run pytest tests
        working-directory: ./api
        env:
          TEST_POSTGRES_DB: ${{ env.POSTGRES_DB }}
          TEST_POSTGRES_USER: ${{ env.POSTGRES_USER }}
          TEST_POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          TEST_POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          TEST_POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
          ALLOWED_HOSTS: ${{ env.ALLOWED_HOSTS }}
          POSTGRES_HOST_AUTH_METHOD: ${{ env.POSTGRES_HOST_AUTH_METHOD }}
          SECRET_KEY: ${{ env.SECRET_KEY }}
          JWT_SECRET_KEY: ${{ env.JWT_SECRET_KEY }}
          USE_HTTPS: ${{ env.USE_HTTPS }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    if: github.ref == 'refs/heads/master'
    env:
      EC2_HOST: "ec2-18-159-112-49.eu-central-1.compute.amazonaws.com"
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to EC2
        run: |
          # Install SSH client
          sudo apt-get update
          sudo apt-get install -y ssh
          
          # Start SSH agent
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${{ secrets.EC2_SSH_KEY }}"
          eval "$(ssh-agent -s)"
          echo "${{ secrets.EC2_SSH_KEY }}" | ssh-add -
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key && chmod 600 private_key
          
          # SSH into the EC2 instance and deploy Docker container
          ssh -o StrictHostKeyChecking=no -i private_key ec2-user@${{ secrets.EC2_HOST }} '
          
            echo "Deploying to EC2 instance..."
            cd /home/ec2-user/dactyl
            git fetch --all
            git reset --hard origin/master
            chmod +x build.sh
            chmod +x ./scripts/reload-certs.sh
            ./build.sh
          '

        env:
          EC2_HOST: "ec2-18-159-112-49.eu-central-1.compute.amazonaws.com"
