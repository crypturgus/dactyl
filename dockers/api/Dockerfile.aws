# Start with a smaller base image
FROM python:3.11-bookworm as builder

# Set environment variables to reduce Python buffering and ensure Python doesnâ€™t create .pyc files
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set the working directory in the container to /app
WORKDIR /app

# Install system dependencies required for Python packages
RUN apt-get update && apt-get install -y --no-install-recommends build-essential libpq-dev && \
    rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

# Copy only the necessary files for dependency installation to leverage Docker cache
COPY ./api/pyproject.toml ./ 
COPY ./api/poetry.lock ./

# Install project dependencies
RUN poetry config virtualenvs.create false && \
    poetry install --no-dev --no-interaction --no-ansi
#RUN which gunicorn
COPY api /app/
# Start a new stage from a smaller base image
#FROM python:3.11-bookworm
#
## Set work directory
#WORKDIR /app
#
## Copy installed dependencies from the builder stage
#COPY --from=builder /app /app
#COPY --from=builder /root/.cache /root/.cache
#
## Copy the application code
#COPY api /app/
#
## Copy the wait-for-it and entrypoint scripts
#RUN which gunicorn

# Expose the port the app runs on
EXPOSE 8000

# Command to run the application
CMD ["gunicorn", "app.wsgi:application", "--bind", "0.0.0.0:8000"]
